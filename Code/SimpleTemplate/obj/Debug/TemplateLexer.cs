//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Administrator\Documents\GitHub\SimpleTemplate\Code\SimpleTemplate\g4\Template.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SimpleTemplate.g4 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TemplateLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, NEWLINE=11, NUMBER=12, CHAR=13, UNDERLINE=14, SPACE=15, DOT=16, 
		V_START=17, V_END=18, KEY_IF=19, KEY_ELSE=20, KEY_ENDIF=21, OP_EQUAL=22, 
		OP_GT=23, OP_EGT=24, OP_LT=25, OP_ELT=26;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"WS", "NEWLINE", "NUMBER", "CHAR", "UNDERLINE", "SPACE", "DOT", "V_START", 
		"V_END", "KEY_IF", "KEY_ELSE", "KEY_ENDIF", "OP_EQUAL", "OP_GT", "OP_EGT", 
		"OP_LT", "OP_ELT"
	};


	public TemplateLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'repeat'", "'end repeat'", "':'", "'''", "'\"'", "'+'", "'-'", 
		"'*'", "'/'", null, null, null, null, "'_'", "' '", "'.'", "'@{'", "'}'", 
		"'if'", "'else'", "'/if'", "'='", "'>'", "'>='", "'<'", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "NEWLINE", 
		"NUMBER", "CHAR", "UNDERLINE", "SPACE", "DOT", "V_START", "V_END", "KEY_IF", 
		"KEY_ELSE", "KEY_ENDIF", "OP_EQUAL", "OP_GT", "OP_EGT", "OP_LT", "OP_ELT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Template.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1C\x8A\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x6\vY"+
		"\n\v\r\v\xE\vZ\x3\v\x3\v\x3\f\x5\f`\n\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x2\x2\x2\x1C\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15"+
		")\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x3\x2"+
		"\x4\x4\x2\v\v\"\"\x4\x2\x43\\\x63|\x8B\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2"+
		"\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2"+
		"\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2"+
		"\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D"+
		"\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3"+
		"\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2"+
		"\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2"+
		"\x2\x2\x3\x37\x3\x2\x2\x2\x5>\x3\x2\x2\x2\aI\x3\x2\x2\x2\tK\x3\x2\x2\x2"+
		"\vM\x3\x2\x2\x2\rO\x3\x2\x2\x2\xFQ\x3\x2\x2\x2\x11S\x3\x2\x2\x2\x13U\x3"+
		"\x2\x2\x2\x15X\x3\x2\x2\x2\x17_\x3\x2\x2\x2\x19\x63\x3\x2\x2\x2\x1B\x65"+
		"\x3\x2\x2\x2\x1Dg\x3\x2\x2\x2\x1Fi\x3\x2\x2\x2!k\x3\x2\x2\x2#m\x3\x2\x2"+
		"\x2%p\x3\x2\x2\x2\'r\x3\x2\x2\x2)u\x3\x2\x2\x2+z\x3\x2\x2\x2-~\x3\x2\x2"+
		"\x2/\x80\x3\x2\x2\x2\x31\x82\x3\x2\x2\x2\x33\x85\x3\x2\x2\x2\x35\x87\x3"+
		"\x2\x2\x2\x37\x38\at\x2\x2\x38\x39\ag\x2\x2\x39:\ar\x2\x2:;\ag\x2\x2;"+
		"<\a\x63\x2\x2<=\av\x2\x2=\x4\x3\x2\x2\x2>?\ag\x2\x2?@\ap\x2\x2@\x41\a"+
		"\x66\x2\x2\x41\x42\a\"\x2\x2\x42\x43\at\x2\x2\x43\x44\ag\x2\x2\x44\x45"+
		"\ar\x2\x2\x45\x46\ag\x2\x2\x46G\a\x63\x2\x2GH\av\x2\x2H\x6\x3\x2\x2\x2"+
		"IJ\a<\x2\x2J\b\x3\x2\x2\x2KL\a)\x2\x2L\n\x3\x2\x2\x2MN\a$\x2\x2N\f\x3"+
		"\x2\x2\x2OP\a-\x2\x2P\xE\x3\x2\x2\x2QR\a/\x2\x2R\x10\x3\x2\x2\x2ST\a,"+
		"\x2\x2T\x12\x3\x2\x2\x2UV\a\x31\x2\x2V\x14\x3\x2\x2\x2WY\t\x2\x2\x2XW"+
		"\x3\x2\x2\x2YZ\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\x3\x2\x2\x2"+
		"\\]\b\v\x2\x2]\x16\x3\x2\x2\x2^`\a\xF\x2\x2_^\x3\x2\x2\x2_`\x3\x2\x2\x2"+
		"`\x61\x3\x2\x2\x2\x61\x62\a\f\x2\x2\x62\x18\x3\x2\x2\x2\x63\x64\x4\x32"+
		";\x2\x64\x1A\x3\x2\x2\x2\x65\x66\t\x3\x2\x2\x66\x1C\x3\x2\x2\x2gh\a\x61"+
		"\x2\x2h\x1E\x3\x2\x2\x2ij\a\"\x2\x2j \x3\x2\x2\x2kl\a\x30\x2\x2l\"\x3"+
		"\x2\x2\x2mn\a\x42\x2\x2no\a}\x2\x2o$\x3\x2\x2\x2pq\a\x7F\x2\x2q&\x3\x2"+
		"\x2\x2rs\ak\x2\x2st\ah\x2\x2t(\x3\x2\x2\x2uv\ag\x2\x2vw\an\x2\x2wx\au"+
		"\x2\x2xy\ag\x2\x2y*\x3\x2\x2\x2z{\a\x31\x2\x2{|\ak\x2\x2|}\ah\x2\x2},"+
		"\x3\x2\x2\x2~\x7F\a?\x2\x2\x7F.\x3\x2\x2\x2\x80\x81\a@\x2\x2\x81\x30\x3"+
		"\x2\x2\x2\x82\x83\a@\x2\x2\x83\x84\a?\x2\x2\x84\x32\x3\x2\x2\x2\x85\x86"+
		"\a>\x2\x2\x86\x34\x3\x2\x2\x2\x87\x88\a>\x2\x2\x88\x89\a?\x2\x2\x89\x36"+
		"\x3\x2\x2\x2\x5\x2Z_\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SimpleTemplate.g4
