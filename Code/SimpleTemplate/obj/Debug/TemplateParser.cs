//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Administrator\Documents\Visual Studio 2012\Projects\SimpleTemplate\SimpleTemplate\g4\Template.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SimpleTemplate.g4 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NEWLINE=12, NUMBER=13, CHAR=14, UNDERLINE=15, SPACE=16, 
		DOT=17, V_START=18, V_END=19;
	public const int
		RULE_compileUnit = 0, RULE_parse = 1, RULE_expression = 2, RULE_repeater_stmt = 3, 
		RULE_repeater_stmt_begin = 4, RULE_repeater_stmt_end = 5, RULE_repeater_stmt_count = 6, 
		RULE_newlines = 7, RULE_stringtext = 8, RULE_placeholderChar = 9, RULE_simple_variable = 10, 
		RULE_complex_variable = 11, RULE_simple_variable_inner = 12, RULE_complex_variable_inner = 13, 
		RULE_identity = 14, RULE_digital = 15;
	public static readonly string[] ruleNames = {
		"compileUnit", "parse", "expression", "repeater_stmt", "repeater_stmt_begin", 
		"repeater_stmt_end", "repeater_stmt_count", "newlines", "stringtext", 
		"placeholderChar", "simple_variable", "complex_variable", "simple_variable_inner", 
		"complex_variable_inner", "identity", "digital"
	};

	private static readonly string[] _LiteralNames = {
		null, "'repeat'", "'end repeat'", "':'", "'''", "'\"'", "'<'", "'>'", 
		"'+'", "'-'", "'*'", "'/'", null, null, null, "'_'", "' '", "'.'", "'@{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NEWLINE", "NUMBER", "CHAR", "UNDERLINE", "SPACE", "DOT", "V_START", "V_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Template.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TemplateParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ParseContext parse() {
			return GetRuleContext<ParseContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; parse();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << NEWLINE) | (1L << NUMBER) | (1L << CHAR) | (1L << UNDERLINE) | (1L << SPACE) | (1L << DOT) | (1L << V_START))) != 0)) {
				{
				{
				State = 34; expression();
				}
				}
				State = 39;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public StringtextContext stringtext() {
			return GetRuleContext<StringtextContext>(0);
		}
		public Simple_variableContext simple_variable() {
			return GetRuleContext<Simple_variableContext>(0);
		}
		public Complex_variableContext complex_variable() {
			return GetRuleContext<Complex_variableContext>(0);
		}
		public Repeater_stmtContext repeater_stmt() {
			return GetRuleContext<Repeater_stmtContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 44;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; stringtext();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; simple_variable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42; complex_variable();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43; repeater_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmtContext : ParserRuleContext {
		public Repeater_stmt_beginContext repeater_stmt_begin() {
			return GetRuleContext<Repeater_stmt_beginContext>(0);
		}
		public Repeater_stmt_endContext repeater_stmt_end() {
			return GetRuleContext<Repeater_stmt_endContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Repeater_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmtContext repeater_stmt() {
		Repeater_stmtContext _localctx = new Repeater_stmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_repeater_stmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; repeater_stmt_begin();
			State = 50;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 47; expression();
					}
					} 
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 53; repeater_stmt_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmt_beginContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public ITerminalNode SPACE() { return GetToken(TemplateParser.SPACE, 0); }
		public Repeater_stmt_countContext repeater_stmt_count() {
			return GetRuleContext<Repeater_stmt_countContext>(0);
		}
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Repeater_stmt_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt_begin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt_begin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmt_beginContext repeater_stmt_begin() {
		Repeater_stmt_beginContext _localctx = new Repeater_stmt_beginContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_repeater_stmt_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(V_START);
			State = 56; Match(T__0);
			State = 57; Match(SPACE);
			State = 58; repeater_stmt_count();
			State = 59; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmt_endContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Repeater_stmt_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt_end(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmt_endContext repeater_stmt_end() {
		Repeater_stmt_endContext _localctx = new Repeater_stmt_endContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_repeater_stmt_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(V_START);
			State = 62; Match(T__1);
			State = 63; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmt_countContext : ParserRuleContext {
		public DigitalContext digital() {
			return GetRuleContext<DigitalContext>(0);
		}
		public Simple_variable_innerContext simple_variable_inner() {
			return GetRuleContext<Simple_variable_innerContext>(0);
		}
		public Complex_variable_innerContext complex_variable_inner() {
			return GetRuleContext<Complex_variable_innerContext>(0);
		}
		public Repeater_stmt_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmt_countContext repeater_stmt_count() {
		Repeater_stmt_countContext _localctx = new Repeater_stmt_countContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_repeater_stmt_count);
		try {
			State = 68;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; digital();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; simple_variable_inner();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67; complex_variable_inner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlinesContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(TemplateParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(TemplateParser.NEWLINE, i);
		}
		public NewlinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newlines; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterNewlines(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitNewlines(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlinesContext newlines() {
		NewlinesContext _localctx = new NewlinesContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_newlines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(NEWLINE);
			State = 74;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 71; Match(NEWLINE);
					}
					} 
				}
				State = 76;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringtextContext : ParserRuleContext {
		public PlaceholderCharContext[] placeholderChar() {
			return GetRuleContexts<PlaceholderCharContext>();
		}
		public PlaceholderCharContext placeholderChar(int i) {
			return GetRuleContext<PlaceholderCharContext>(i);
		}
		public NewlinesContext newlines() {
			return GetRuleContext<NewlinesContext>(0);
		}
		public StringtextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringtext; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterStringtext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitStringtext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringtext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringtextContext stringtext() {
		StringtextContext _localctx = new StringtextContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stringtext);
		try {
			int _alt;
			State = 85;
			switch (_input.La(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case NUMBER:
			case CHAR:
			case UNDERLINE:
			case SPACE:
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; placeholderChar();
				State = 81;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 78; placeholderChar();
						}
						} 
					}
					State = 83;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				}
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; newlines();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderCharContext : ParserRuleContext {
		public ITerminalNode CHAR() { return GetToken(TemplateParser.CHAR, 0); }
		public ITerminalNode SPACE() { return GetToken(TemplateParser.SPACE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TemplateParser.NUMBER, 0); }
		public ITerminalNode DOT() { return GetToken(TemplateParser.DOT, 0); }
		public PlaceholderCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholderChar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterPlaceholderChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitPlaceholderChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholderChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderCharContext placeholderChar() {
		PlaceholderCharContext _localctx = new PlaceholderCharContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_placeholderChar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << NUMBER) | (1L << CHAR) | (1L << UNDERLINE) | (1L << SPACE) | (1L << DOT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_variableContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public Simple_variable_innerContext simple_variable_inner() {
			return GetRuleContext<Simple_variable_innerContext>(0);
		}
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Simple_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterSimple_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitSimple_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_variableContext simple_variable() {
		Simple_variableContext _localctx = new Simple_variableContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_simple_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(V_START);
			State = 90; simple_variable_inner();
			State = 91; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_variableContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public Complex_variable_innerContext complex_variable_inner() {
			return GetRuleContext<Complex_variable_innerContext>(0);
		}
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Complex_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterComplex_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitComplex_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_variableContext complex_variable() {
		Complex_variableContext _localctx = new Complex_variableContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_complex_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(V_START);
			State = 94; complex_variable_inner();
			State = 95; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_variable_innerContext : ParserRuleContext {
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public Simple_variable_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_variable_inner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterSimple_variable_inner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitSimple_variable_inner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_variable_inner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_variable_innerContext simple_variable_inner() {
		Simple_variable_innerContext _localctx = new Simple_variable_innerContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_simple_variable_inner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; identity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_variable_innerContext : ParserRuleContext {
		public IdentityContext[] identity() {
			return GetRuleContexts<IdentityContext>();
		}
		public IdentityContext identity(int i) {
			return GetRuleContext<IdentityContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TemplateParser.DOT, 0); }
		public Complex_variable_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_variable_inner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterComplex_variable_inner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitComplex_variable_inner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_variable_inner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_variable_innerContext complex_variable_inner() {
		Complex_variable_innerContext _localctx = new Complex_variable_innerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_complex_variable_inner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; identity();
			State = 100; Match(DOT);
			State = 101; identity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentityContext : ParserRuleContext {
		public ITerminalNode[] UNDERLINE() { return GetTokens(TemplateParser.UNDERLINE); }
		public ITerminalNode UNDERLINE(int i) {
			return GetToken(TemplateParser.UNDERLINE, i);
		}
		public ITerminalNode[] CHAR() { return GetTokens(TemplateParser.CHAR); }
		public ITerminalNode CHAR(int i) {
			return GetToken(TemplateParser.CHAR, i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(TemplateParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(TemplateParser.NUMBER, i);
		}
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIdentity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIdentity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_identity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = _input.La(1);
			if ( !(_la==CHAR || _la==UNDERLINE) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << CHAR) | (1L << UNDERLINE))) != 0)) {
				{
				{
				State = 104;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << CHAR) | (1L << UNDERLINE))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitalContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(TemplateParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(TemplateParser.NUMBER, i);
		}
		public DigitalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digital; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterDigital(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitDigital(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigital(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DigitalContext digital() {
		DigitalContext _localctx = new DigitalContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_digital);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(NUMBER);
			State = 114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NUMBER) {
				{
				{
				State = 111; Match(NUMBER);
				}
				}
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15x\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x3\a\x3&\n\x3\f\x3\xE\x3)\v\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4/\n\x4\x3\x5\x3\x5\a\x5\x33\n\x5\f\x5\xE\x5\x36"+
		"\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\b\x5\bG\n\b\x3\t\x3\t\a\tK\n\t\f\t\xE\tN\v\t\x3\n\x3\n"+
		"\a\nR\n\n\f\n\xE\nU\v\n\x3\n\x5\nX\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\a"+
		"\x10l\n\x10\f\x10\xE\x10o\v\x10\x3\x11\x3\x11\a\x11s\n\x11\f\x11\xE\x11"+
		"v\v\x11\x3\x11\x2\x2\x2\x12\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\x2\x5\x4\x2\x5"+
		"\r\xF\x13\x3\x2\x10\x11\x3\x2\xF\x11s\x2\"\x3\x2\x2\x2\x4\'\x3\x2\x2\x2"+
		"\x6.\x3\x2\x2\x2\b\x30\x3\x2\x2\x2\n\x39\x3\x2\x2\x2\f?\x3\x2\x2\x2\xE"+
		"\x46\x3\x2\x2\x2\x10H\x3\x2\x2\x2\x12W\x3\x2\x2\x2\x14Y\x3\x2\x2\x2\x16"+
		"[\x3\x2\x2\x2\x18_\x3\x2\x2\x2\x1A\x63\x3\x2\x2\x2\x1C\x65\x3\x2\x2\x2"+
		"\x1Ei\x3\x2\x2\x2 p\x3\x2\x2\x2\"#\x5\x4\x3\x2#\x3\x3\x2\x2\x2$&\x5\x6"+
		"\x4\x2%$\x3\x2\x2\x2&)\x3\x2\x2\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2(\x5\x3"+
		"\x2\x2\x2)\'\x3\x2\x2\x2*/\x5\x12\n\x2+/\x5\x16\f\x2,/\x5\x18\r\x2-/\x5"+
		"\b\x5\x2.*\x3\x2\x2\x2.+\x3\x2\x2\x2.,\x3\x2\x2\x2.-\x3\x2\x2\x2/\a\x3"+
		"\x2\x2\x2\x30\x34\x5\n\x6\x2\x31\x33\x5\x6\x4\x2\x32\x31\x3\x2\x2\x2\x33"+
		"\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x37\x3\x2"+
		"\x2\x2\x36\x34\x3\x2\x2\x2\x37\x38\x5\f\a\x2\x38\t\x3\x2\x2\x2\x39:\a"+
		"\x14\x2\x2:;\a\x3\x2\x2;<\a\x12\x2\x2<=\x5\xE\b\x2=>\a\x15\x2\x2>\v\x3"+
		"\x2\x2\x2?@\a\x14\x2\x2@\x41\a\x4\x2\x2\x41\x42\a\x15\x2\x2\x42\r\x3\x2"+
		"\x2\x2\x43G\x5 \x11\x2\x44G\x5\x1A\xE\x2\x45G\x5\x1C\xF\x2\x46\x43\x3"+
		"\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46\x45\x3\x2\x2\x2G\xF\x3\x2\x2\x2HL\a"+
		"\xE\x2\x2IK\a\xE\x2\x2JI\x3\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3"+
		"\x2\x2\x2M\x11\x3\x2\x2\x2NL\x3\x2\x2\x2OS\x5\x14\v\x2PR\x5\x14\v\x2Q"+
		"P\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TX\x3\x2\x2\x2"+
		"US\x3\x2\x2\x2VX\x5\x10\t\x2WO\x3\x2\x2\x2WV\x3\x2\x2\x2X\x13\x3\x2\x2"+
		"\x2YZ\t\x2\x2\x2Z\x15\x3\x2\x2\x2[\\\a\x14\x2\x2\\]\x5\x1A\xE\x2]^\a\x15"+
		"\x2\x2^\x17\x3\x2\x2\x2_`\a\x14\x2\x2`\x61\x5\x1C\xF\x2\x61\x62\a\x15"+
		"\x2\x2\x62\x19\x3\x2\x2\x2\x63\x64\x5\x1E\x10\x2\x64\x1B\x3\x2\x2\x2\x65"+
		"\x66\x5\x1E\x10\x2\x66g\a\x13\x2\x2gh\x5\x1E\x10\x2h\x1D\x3\x2\x2\x2i"+
		"m\t\x3\x2\x2jl\t\x4\x2\x2kj\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn"+
		"\x3\x2\x2\x2n\x1F\x3\x2\x2\x2om\x3\x2\x2\x2pt\a\xF\x2\x2qs\a\xF\x2\x2"+
		"rq\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2u!\x3\x2\x2\x2"+
		"vt\x3\x2\x2\x2\v\'.\x34\x46LSWmt";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SimpleTemplate.g4
