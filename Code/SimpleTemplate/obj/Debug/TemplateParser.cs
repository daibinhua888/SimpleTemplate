//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Administrator\Documents\GitHub\SimpleTemplate\Code\SimpleTemplate\g4\Template.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SimpleTemplate.g4 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, NEWLINE=11, NUMBER=12, CHAR=13, UNDERLINE=14, SPACE=15, DOT=16, 
		V_START=17, V_END=18, KEY_IF=19, KEY_ELSE=20, KEY_ENDIF=21, OP_EQUAL=22, 
		OP_GT=23, OP_EGT=24, OP_LT=25, OP_ELT=26;
	public const int
		RULE_compileUnit = 0, RULE_parse = 1, RULE_expression = 2, RULE_repeater_stmt = 3, 
		RULE_repeater_stmt_begin = 4, RULE_repeater_stmt_end = 5, RULE_repeater_stmt_count = 6, 
		RULE_newlines = 7, RULE_stringtext = 8, RULE_placeholderChar = 9, RULE_simple_variable = 10, 
		RULE_complex_variable = 11, RULE_simple_variable_inner = 12, RULE_complex_variable_inner = 13, 
		RULE_identity = 14, RULE_digital = 15, RULE_if_stmt = 16, RULE_if_stmt_conditions_block = 17, 
		RULE_if_stmt_conditions_body = 18, RULE_if_stmt_conditions = 19, RULE_if_stmt_condition = 20, 
		RULE_if_stmt_else_block = 21, RULE_if_stmt_else_body = 22, RULE_if_stmt_end_if_block = 23, 
		RULE_left_op = 24, RULE_right_op = 25, RULE_op = 26;
	public static readonly string[] ruleNames = {
		"compileUnit", "parse", "expression", "repeater_stmt", "repeater_stmt_begin", 
		"repeater_stmt_end", "repeater_stmt_count", "newlines", "stringtext", 
		"placeholderChar", "simple_variable", "complex_variable", "simple_variable_inner", 
		"complex_variable_inner", "identity", "digital", "if_stmt", "if_stmt_conditions_block", 
		"if_stmt_conditions_body", "if_stmt_conditions", "if_stmt_condition", 
		"if_stmt_else_block", "if_stmt_else_body", "if_stmt_end_if_block", "left_op", 
		"right_op", "op"
	};

	private static readonly string[] _LiteralNames = {
		null, "'repeat'", "'end repeat'", "':'", "'''", "'\"'", "'+'", "'-'", 
		"'*'", "'/'", null, null, null, null, "'_'", "' '", "'.'", "'@{'", "'}'", 
		"'if'", "'else'", "'/if'", "'='", "'>'", "'>='", "'<'", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "NEWLINE", 
		"NUMBER", "CHAR", "UNDERLINE", "SPACE", "DOT", "V_START", "V_END", "KEY_IF", 
		"KEY_ELSE", "KEY_ENDIF", "OP_EQUAL", "OP_GT", "OP_EGT", "OP_LT", "OP_ELT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Template.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TemplateParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ParseContext parse() {
			return GetRuleContext<ParseContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; parse();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_parse);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 56; expression();
					}
					} 
				}
				State = 61;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public StringtextContext stringtext() {
			return GetRuleContext<StringtextContext>(0);
		}
		public Simple_variableContext simple_variable() {
			return GetRuleContext<Simple_variableContext>(0);
		}
		public Complex_variableContext complex_variable() {
			return GetRuleContext<Complex_variableContext>(0);
		}
		public Repeater_stmtContext repeater_stmt() {
			return GetRuleContext<Repeater_stmtContext>(0);
		}
		public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 67;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; stringtext();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; simple_variable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; complex_variable();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65; repeater_stmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 66; if_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmtContext : ParserRuleContext {
		public Repeater_stmt_beginContext repeater_stmt_begin() {
			return GetRuleContext<Repeater_stmt_beginContext>(0);
		}
		public Repeater_stmt_endContext repeater_stmt_end() {
			return GetRuleContext<Repeater_stmt_endContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Repeater_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmtContext repeater_stmt() {
		Repeater_stmtContext _localctx = new Repeater_stmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_repeater_stmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; repeater_stmt_begin();
			State = 73;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 70; expression();
					}
					} 
				}
				State = 75;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 76; repeater_stmt_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmt_beginContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public Repeater_stmt_countContext repeater_stmt_count() {
			return GetRuleContext<Repeater_stmt_countContext>(0);
		}
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Repeater_stmt_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt_begin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt_begin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmt_beginContext repeater_stmt_begin() {
		Repeater_stmt_beginContext _localctx = new Repeater_stmt_beginContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_repeater_stmt_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(V_START);
			State = 79; Match(T__0);
			State = 80; repeater_stmt_count();
			State = 81; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmt_endContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Repeater_stmt_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt_end(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmt_endContext repeater_stmt_end() {
		Repeater_stmt_endContext _localctx = new Repeater_stmt_endContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_repeater_stmt_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(V_START);
			State = 84; Match(T__1);
			State = 85; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeater_stmt_countContext : ParserRuleContext {
		public DigitalContext digital() {
			return GetRuleContext<DigitalContext>(0);
		}
		public Simple_variable_innerContext simple_variable_inner() {
			return GetRuleContext<Simple_variable_innerContext>(0);
		}
		public Complex_variable_innerContext complex_variable_inner() {
			return GetRuleContext<Complex_variable_innerContext>(0);
		}
		public Repeater_stmt_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeater_stmt_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRepeater_stmt_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRepeater_stmt_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeater_stmt_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeater_stmt_countContext repeater_stmt_count() {
		Repeater_stmt_countContext _localctx = new Repeater_stmt_countContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_repeater_stmt_count);
		try {
			State = 90;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; digital();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; simple_variable_inner();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; complex_variable_inner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlinesContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(TemplateParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(TemplateParser.NEWLINE, i);
		}
		public NewlinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newlines; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterNewlines(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitNewlines(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlinesContext newlines() {
		NewlinesContext _localctx = new NewlinesContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_newlines);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(NEWLINE);
			State = 96;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 93; Match(NEWLINE);
					}
					} 
				}
				State = 98;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringtextContext : ParserRuleContext {
		public PlaceholderCharContext[] placeholderChar() {
			return GetRuleContexts<PlaceholderCharContext>();
		}
		public PlaceholderCharContext placeholderChar(int i) {
			return GetRuleContext<PlaceholderCharContext>(i);
		}
		public NewlinesContext newlines() {
			return GetRuleContext<NewlinesContext>(0);
		}
		public StringtextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringtext; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterStringtext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitStringtext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringtext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringtextContext stringtext() {
		StringtextContext _localctx = new StringtextContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stringtext);
		try {
			int _alt;
			State = 107;
			switch (_input.La(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case NUMBER:
			case CHAR:
			case UNDERLINE:
			case SPACE:
			case DOT:
			case OP_GT:
			case OP_LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; placeholderChar();
				State = 103;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 100; placeholderChar();
						}
						} 
					}
					State = 105;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				}
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; newlines();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderCharContext : ParserRuleContext {
		public ITerminalNode CHAR() { return GetToken(TemplateParser.CHAR, 0); }
		public ITerminalNode SPACE() { return GetToken(TemplateParser.SPACE, 0); }
		public ITerminalNode NUMBER() { return GetToken(TemplateParser.NUMBER, 0); }
		public ITerminalNode DOT() { return GetToken(TemplateParser.DOT, 0); }
		public PlaceholderCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholderChar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterPlaceholderChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitPlaceholderChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholderChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderCharContext placeholderChar() {
		PlaceholderCharContext _localctx = new PlaceholderCharContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_placeholderChar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << NUMBER) | (1L << CHAR) | (1L << UNDERLINE) | (1L << SPACE) | (1L << DOT) | (1L << OP_GT) | (1L << OP_LT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_variableContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public Simple_variable_innerContext simple_variable_inner() {
			return GetRuleContext<Simple_variable_innerContext>(0);
		}
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Simple_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterSimple_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitSimple_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_variableContext simple_variable() {
		Simple_variableContext _localctx = new Simple_variableContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_simple_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(V_START);
			State = 112; simple_variable_inner();
			State = 113; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_variableContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public Complex_variable_innerContext complex_variable_inner() {
			return GetRuleContext<Complex_variable_innerContext>(0);
		}
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public Complex_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterComplex_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitComplex_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_variableContext complex_variable() {
		Complex_variableContext _localctx = new Complex_variableContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_complex_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(V_START);
			State = 116; complex_variable_inner();
			State = 117; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_variable_innerContext : ParserRuleContext {
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public Simple_variable_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_variable_inner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterSimple_variable_inner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitSimple_variable_inner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_variable_inner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_variable_innerContext simple_variable_inner() {
		Simple_variable_innerContext _localctx = new Simple_variable_innerContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_simple_variable_inner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; identity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_variable_innerContext : ParserRuleContext {
		public IdentityContext[] identity() {
			return GetRuleContexts<IdentityContext>();
		}
		public IdentityContext identity(int i) {
			return GetRuleContext<IdentityContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(TemplateParser.DOT, 0); }
		public Complex_variable_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_variable_inner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterComplex_variable_inner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitComplex_variable_inner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_variable_inner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_variable_innerContext complex_variable_inner() {
		Complex_variable_innerContext _localctx = new Complex_variable_innerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_complex_variable_inner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; identity();
			State = 122; Match(DOT);
			State = 123; identity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentityContext : ParserRuleContext {
		public ITerminalNode[] UNDERLINE() { return GetTokens(TemplateParser.UNDERLINE); }
		public ITerminalNode UNDERLINE(int i) {
			return GetToken(TemplateParser.UNDERLINE, i);
		}
		public ITerminalNode[] CHAR() { return GetTokens(TemplateParser.CHAR); }
		public ITerminalNode CHAR(int i) {
			return GetToken(TemplateParser.CHAR, i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(TemplateParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(TemplateParser.NUMBER, i);
		}
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIdentity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIdentity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_identity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_la = _input.La(1);
			if ( !(_la==CHAR || _la==UNDERLINE) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << CHAR) | (1L << UNDERLINE))) != 0)) {
				{
				{
				State = 126;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << CHAR) | (1L << UNDERLINE))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
				}
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitalContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(TemplateParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(TemplateParser.NUMBER, i);
		}
		public DigitalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digital; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterDigital(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitDigital(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigital(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DigitalContext digital() {
		DigitalContext _localctx = new DigitalContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_digital);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(NUMBER);
			State = 136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NUMBER) {
				{
				{
				State = 133; Match(NUMBER);
				}
				}
				State = 138;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public If_stmt_conditions_blockContext if_stmt_conditions_block() {
			return GetRuleContext<If_stmt_conditions_blockContext>(0);
		}
		public If_stmt_end_if_blockContext if_stmt_end_if_block() {
			return GetRuleContext<If_stmt_end_if_blockContext>(0);
		}
		public If_stmt_else_blockContext if_stmt_else_block() {
			return GetRuleContext<If_stmt_else_blockContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; if_stmt_conditions_block();
			State = 141;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 140; if_stmt_else_block();
				}
				break;
			}
			State = 143; if_stmt_end_if_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmt_conditions_blockContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public ITerminalNode KEY_IF() { return GetToken(TemplateParser.KEY_IF, 0); }
		public If_stmt_conditionsContext if_stmt_conditions() {
			return GetRuleContext<If_stmt_conditionsContext>(0);
		}
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public If_stmt_conditions_bodyContext if_stmt_conditions_body() {
			return GetRuleContext<If_stmt_conditions_bodyContext>(0);
		}
		public If_stmt_conditions_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt_conditions_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt_conditions_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt_conditions_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt_conditions_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmt_conditions_blockContext if_stmt_conditions_block() {
		If_stmt_conditions_blockContext _localctx = new If_stmt_conditions_blockContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_if_stmt_conditions_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(V_START);
			State = 146; Match(KEY_IF);
			State = 147; if_stmt_conditions();
			State = 148; Match(V_END);
			State = 149; if_stmt_conditions_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmt_conditions_bodyContext : ParserRuleContext {
		public ParseContext parse() {
			return GetRuleContext<ParseContext>(0);
		}
		public If_stmt_conditions_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt_conditions_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt_conditions_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt_conditions_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt_conditions_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmt_conditions_bodyContext if_stmt_conditions_body() {
		If_stmt_conditions_bodyContext _localctx = new If_stmt_conditions_bodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_if_stmt_conditions_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; parse();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmt_conditionsContext : ParserRuleContext {
		public If_stmt_conditionContext if_stmt_condition() {
			return GetRuleContext<If_stmt_conditionContext>(0);
		}
		public If_stmt_conditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt_conditions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt_conditions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt_conditions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt_conditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmt_conditionsContext if_stmt_conditions() {
		If_stmt_conditionsContext _localctx = new If_stmt_conditionsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_if_stmt_conditions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; if_stmt_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmt_conditionContext : ParserRuleContext {
		public Left_opContext left_op() {
			return GetRuleContext<Left_opContext>(0);
		}
		public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		public Right_opContext right_op() {
			return GetRuleContext<Right_opContext>(0);
		}
		public If_stmt_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmt_conditionContext if_stmt_condition() {
		If_stmt_conditionContext _localctx = new If_stmt_conditionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_if_stmt_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; left_op();
			State = 156; op();
			State = 157; right_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmt_else_blockContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public ITerminalNode KEY_ELSE() { return GetToken(TemplateParser.KEY_ELSE, 0); }
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public If_stmt_else_bodyContext if_stmt_else_body() {
			return GetRuleContext<If_stmt_else_bodyContext>(0);
		}
		public If_stmt_else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt_else_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt_else_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt_else_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt_else_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmt_else_blockContext if_stmt_else_block() {
		If_stmt_else_blockContext _localctx = new If_stmt_else_blockContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_if_stmt_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(V_START);
			State = 160; Match(KEY_ELSE);
			State = 161; Match(V_END);
			State = 162; if_stmt_else_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmt_else_bodyContext : ParserRuleContext {
		public ParseContext parse() {
			return GetRuleContext<ParseContext>(0);
		}
		public If_stmt_else_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt_else_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt_else_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt_else_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt_else_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmt_else_bodyContext if_stmt_else_body() {
		If_stmt_else_bodyContext _localctx = new If_stmt_else_bodyContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_if_stmt_else_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; parse();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmt_end_if_blockContext : ParserRuleContext {
		public ITerminalNode V_START() { return GetToken(TemplateParser.V_START, 0); }
		public ITerminalNode KEY_ENDIF() { return GetToken(TemplateParser.KEY_ENDIF, 0); }
		public ITerminalNode V_END() { return GetToken(TemplateParser.V_END, 0); }
		public If_stmt_end_if_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt_end_if_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterIf_stmt_end_if_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitIf_stmt_end_if_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt_end_if_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmt_end_if_blockContext if_stmt_end_if_block() {
		If_stmt_end_if_blockContext _localctx = new If_stmt_end_if_blockContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_if_stmt_end_if_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(V_START);
			State = 167; Match(KEY_ENDIF);
			State = 168; Match(V_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_opContext : ParserRuleContext {
		public DigitalContext digital() {
			return GetRuleContext<DigitalContext>(0);
		}
		public Simple_variable_innerContext simple_variable_inner() {
			return GetRuleContext<Simple_variable_innerContext>(0);
		}
		public Complex_variable_innerContext complex_variable_inner() {
			return GetRuleContext<Complex_variable_innerContext>(0);
		}
		public Left_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterLeft_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitLeft_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_opContext left_op() {
		Left_opContext _localctx = new Left_opContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_left_op);
		try {
			State = 173;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; digital();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; simple_variable_inner();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; complex_variable_inner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_opContext : ParserRuleContext {
		public DigitalContext digital() {
			return GetRuleContext<DigitalContext>(0);
		}
		public Simple_variable_innerContext simple_variable_inner() {
			return GetRuleContext<Simple_variable_innerContext>(0);
		}
		public Complex_variable_innerContext complex_variable_inner() {
			return GetRuleContext<Complex_variable_innerContext>(0);
		}
		public Right_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterRight_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitRight_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_opContext right_op() {
		Right_opContext _localctx = new Right_opContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_right_op);
		try {
			State = 178;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; digital();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; simple_variable_inner();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; complex_variable_inner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public ITerminalNode OP_EQUAL() { return GetToken(TemplateParser.OP_EQUAL, 0); }
		public ITerminalNode OP_GT() { return GetToken(TemplateParser.OP_GT, 0); }
		public ITerminalNode OP_EGT() { return GetToken(TemplateParser.OP_EGT, 0); }
		public ITerminalNode OP_LT() { return GetToken(TemplateParser.OP_LT, 0); }
		public ITerminalNode OP_ELT() { return GetToken(TemplateParser.OP_ELT, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateListener typedListener = listener as ITemplateListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateVisitor<TResult> typedVisitor = visitor as ITemplateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_EQUAL) | (1L << OP_GT) | (1L << OP_EGT) | (1L << OP_LT) | (1L << OP_ELT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1C\xB9\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x3\a\x3<\n\x3\f\x3\xE\x3?\v\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x46\n\x4\x3\x5\x3\x5\a\x5J\n\x5\f\x5\xE"+
		"\x5M\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\b\x5\b]\n\b\x3\t\x3\t\a\t\x61\n\t\f\t\xE\t\x64\v\t\x3"+
		"\n\x3\n\a\nh\n\n\f\n\xE\nk\v\n\x3\n\x5\nn\n\n\x3\v\x3\v\x3\f\x3\f\x3\f"+
		"\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\a\x10\x82\n\x10\f\x10\xE\x10\x85\v\x10\x3\x11\x3\x11\a\x11\x89\n"+
		"\x11\f\x11\xE\x11\x8C\v\x11\x3\x12\x3\x12\x5\x12\x90\n\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xB0\n"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\xB5\n\x1B\x3\x1C\x3\x1C\x3\x1C\x2\x2"+
		"\x2\x1D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2"+
		"\x32\x2\x34\x2\x36\x2\x2\x6\x6\x2\x5\v\xE\x12\x19\x19\x1B\x1B\x3\x2\xF"+
		"\x10\x3\x2\xE\x10\x3\x2\x18\x1C\xAF\x2\x38\x3\x2\x2\x2\x4=\x3\x2\x2\x2"+
		"\x6\x45\x3\x2\x2\x2\bG\x3\x2\x2\x2\nP\x3\x2\x2\x2\fU\x3\x2\x2\x2\xE\\"+
		"\x3\x2\x2\x2\x10^\x3\x2\x2\x2\x12m\x3\x2\x2\x2\x14o\x3\x2\x2\x2\x16q\x3"+
		"\x2\x2\x2\x18u\x3\x2\x2\x2\x1Ay\x3\x2\x2\x2\x1C{\x3\x2\x2\x2\x1E\x7F\x3"+
		"\x2\x2\x2 \x86\x3\x2\x2\x2\"\x8D\x3\x2\x2\x2$\x93\x3\x2\x2\x2&\x99\x3"+
		"\x2\x2\x2(\x9B\x3\x2\x2\x2*\x9D\x3\x2\x2\x2,\xA1\x3\x2\x2\x2.\xA6\x3\x2"+
		"\x2\x2\x30\xA8\x3\x2\x2\x2\x32\xAF\x3\x2\x2\x2\x34\xB4\x3\x2\x2\x2\x36"+
		"\xB6\x3\x2\x2\x2\x38\x39\x5\x4\x3\x2\x39\x3\x3\x2\x2\x2:<\x5\x6\x4\x2"+
		";:\x3\x2\x2\x2<?\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>\x5\x3\x2\x2"+
		"\x2?=\x3\x2\x2\x2@\x46\x5\x12\n\x2\x41\x46\x5\x16\f\x2\x42\x46\x5\x18"+
		"\r\x2\x43\x46\x5\b\x5\x2\x44\x46\x5\"\x12\x2\x45@\x3\x2\x2\x2\x45\x41"+
		"\x3\x2\x2\x2\x45\x42\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x44\x3\x2\x2"+
		"\x2\x46\a\x3\x2\x2\x2GK\x5\n\x6\x2HJ\x5\x6\x4\x2IH\x3\x2\x2\x2JM\x3\x2"+
		"\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2LN\x3\x2\x2\x2MK\x3\x2\x2\x2NO\x5\f"+
		"\a\x2O\t\x3\x2\x2\x2PQ\a\x13\x2\x2QR\a\x3\x2\x2RS\x5\xE\b\x2ST\a\x14\x2"+
		"\x2T\v\x3\x2\x2\x2UV\a\x13\x2\x2VW\a\x4\x2\x2WX\a\x14\x2\x2X\r\x3\x2\x2"+
		"\x2Y]\x5 \x11\x2Z]\x5\x1A\xE\x2[]\x5\x1C\xF\x2\\Y\x3\x2\x2\x2\\Z\x3\x2"+
		"\x2\x2\\[\x3\x2\x2\x2]\xF\x3\x2\x2\x2^\x62\a\r\x2\x2_\x61\a\r\x2\x2`_"+
		"\x3\x2\x2\x2\x61\x64\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2"+
		"\x63\x11\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x65i\x5\x14\v\x2\x66h\x5\x14"+
		"\v\x2g\x66\x3\x2\x2\x2hk\x3\x2\x2\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2jn\x3"+
		"\x2\x2\x2ki\x3\x2\x2\x2ln\x5\x10\t\x2m\x65\x3\x2\x2\x2ml\x3\x2\x2\x2n"+
		"\x13\x3\x2\x2\x2op\t\x2\x2\x2p\x15\x3\x2\x2\x2qr\a\x13\x2\x2rs\x5\x1A"+
		"\xE\x2st\a\x14\x2\x2t\x17\x3\x2\x2\x2uv\a\x13\x2\x2vw\x5\x1C\xF\x2wx\a"+
		"\x14\x2\x2x\x19\x3\x2\x2\x2yz\x5\x1E\x10\x2z\x1B\x3\x2\x2\x2{|\x5\x1E"+
		"\x10\x2|}\a\x12\x2\x2}~\x5\x1E\x10\x2~\x1D\x3\x2\x2\x2\x7F\x83\t\x3\x2"+
		"\x2\x80\x82\t\x4\x2\x2\x81\x80\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81"+
		"\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x1F\x3\x2\x2\x2\x85\x83\x3\x2\x2"+
		"\x2\x86\x8A\a\xE\x2\x2\x87\x89\a\xE\x2\x2\x88\x87\x3\x2\x2\x2\x89\x8C"+
		"\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B!\x3\x2\x2\x2"+
		"\x8C\x8A\x3\x2\x2\x2\x8D\x8F\x5$\x13\x2\x8E\x90\x5,\x17\x2\x8F\x8E\x3"+
		"\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x92\x5\x30\x19\x2"+
		"\x92#\x3\x2\x2\x2\x93\x94\a\x13\x2\x2\x94\x95\a\x15\x2\x2\x95\x96\x5("+
		"\x15\x2\x96\x97\a\x14\x2\x2\x97\x98\x5&\x14\x2\x98%\x3\x2\x2\x2\x99\x9A"+
		"\x5\x4\x3\x2\x9A\'\x3\x2\x2\x2\x9B\x9C\x5*\x16\x2\x9C)\x3\x2\x2\x2\x9D"+
		"\x9E\x5\x32\x1A\x2\x9E\x9F\x5\x36\x1C\x2\x9F\xA0\x5\x34\x1B\x2\xA0+\x3"+
		"\x2\x2\x2\xA1\xA2\a\x13\x2\x2\xA2\xA3\a\x16\x2\x2\xA3\xA4\a\x14\x2\x2"+
		"\xA4\xA5\x5.\x18\x2\xA5-\x3\x2\x2\x2\xA6\xA7\x5\x4\x3\x2\xA7/\x3\x2\x2"+
		"\x2\xA8\xA9\a\x13\x2\x2\xA9\xAA\a\x17\x2\x2\xAA\xAB\a\x14\x2\x2\xAB\x31"+
		"\x3\x2\x2\x2\xAC\xB0\x5 \x11\x2\xAD\xB0\x5\x1A\xE\x2\xAE\xB0\x5\x1C\xF"+
		"\x2\xAF\xAC\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xAE\x3\x2\x2\x2\xB0\x33"+
		"\x3\x2\x2\x2\xB1\xB5\x5 \x11\x2\xB2\xB5\x5\x1A\xE\x2\xB3\xB5\x5\x1C\xF"+
		"\x2\xB4\xB1\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\x35"+
		"\x3\x2\x2\x2\xB6\xB7\t\x5\x2\x2\xB7\x37\x3\x2\x2\x2\xE=\x45K\\\x62im\x83"+
		"\x8A\x8F\xAF\xB4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SimpleTemplate.g4
