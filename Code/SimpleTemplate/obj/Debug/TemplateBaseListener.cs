//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Administrator\Documents\Visual Studio 2012\Projects\SimpleTemplate\SimpleTemplate\g4\Template.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace SimpleTemplate.g4 {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ITemplateListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TemplateBaseListener : ITemplateListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.compileUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompileUnit([NotNull] TemplateParser.CompileUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.compileUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompileUnit([NotNull] TemplateParser.CompileUnitContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.parse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParse([NotNull] TemplateParser.ParseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.parse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParse([NotNull] TemplateParser.ParseContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] TemplateParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] TemplateParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.repeater_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeater_stmt([NotNull] TemplateParser.Repeater_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.repeater_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeater_stmt([NotNull] TemplateParser.Repeater_stmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.repeater_stmt_begin"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeater_stmt_begin([NotNull] TemplateParser.Repeater_stmt_beginContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.repeater_stmt_begin"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeater_stmt_begin([NotNull] TemplateParser.Repeater_stmt_beginContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.repeater_stmt_end"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeater_stmt_end([NotNull] TemplateParser.Repeater_stmt_endContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.repeater_stmt_end"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeater_stmt_end([NotNull] TemplateParser.Repeater_stmt_endContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.repeater_stmt_count"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeater_stmt_count([NotNull] TemplateParser.Repeater_stmt_countContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.repeater_stmt_count"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeater_stmt_count([NotNull] TemplateParser.Repeater_stmt_countContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.newlines"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewlines([NotNull] TemplateParser.NewlinesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.newlines"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewlines([NotNull] TemplateParser.NewlinesContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.stringtext"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringtext([NotNull] TemplateParser.StringtextContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.stringtext"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringtext([NotNull] TemplateParser.StringtextContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.placeholderChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPlaceholderChar([NotNull] TemplateParser.PlaceholderCharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.placeholderChar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPlaceholderChar([NotNull] TemplateParser.PlaceholderCharContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.simple_variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimple_variable([NotNull] TemplateParser.Simple_variableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.simple_variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimple_variable([NotNull] TemplateParser.Simple_variableContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.complex_variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComplex_variable([NotNull] TemplateParser.Complex_variableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.complex_variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComplex_variable([NotNull] TemplateParser.Complex_variableContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.simple_variable_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimple_variable_inner([NotNull] TemplateParser.Simple_variable_innerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.simple_variable_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimple_variable_inner([NotNull] TemplateParser.Simple_variable_innerContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.complex_variable_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComplex_variable_inner([NotNull] TemplateParser.Complex_variable_innerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.complex_variable_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComplex_variable_inner([NotNull] TemplateParser.Complex_variable_innerContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.identity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentity([NotNull] TemplateParser.IdentityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.identity"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentity([NotNull] TemplateParser.IdentityContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TemplateParser.digital"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDigital([NotNull] TemplateParser.DigitalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TemplateParser.digital"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDigital([NotNull] TemplateParser.DigitalContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace SimpleTemplate.g4
